import {
  require_jquery
} from "./chunk-OGVVV2AK.js";
import {
  __toESM
} from "./chunk-G3PMV62Z.js";

// node_modules/@rateyo/jquery/lib/es/jquery.rateyo.js
var import_jquery = __toESM(require_jquery());
function _typeof(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof(obj);
}
function _typeof$1(obj) {
  "@babel/helpers - typeof";
  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof$1 = function(obj2) {
      return typeof obj2;
    };
  } else {
    _typeof$1 = function(obj2) {
      return obj2 && typeof Symbol === "function" && obj2.constructor === Symbol && obj2 !== Symbol.prototype ? "symbol" : typeof obj2;
    };
  }
  return _typeof$1(obj);
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function(sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};
    if (i % 2) {
      ownKeys(Object(source), true).forEach(function(key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function(key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }
  return target;
}
var BASICSTAR = '<?xml version="1.0" encoding="utf-8"?><svg version="1.1"xmlns="http://www.w3.org/2000/svg"viewBox="0 12.705 512 486.59"x="0px" y="0px"xml:space="preserve"><polygon points="256.814,12.705 317.205,198.566 512.631,198.566 354.529,313.435 414.918,499.295 256.814,384.427 98.713,499.295 159.102,313.435 1,198.566 196.426,198.566 "/></svg>';
var DEFAULTS = {
  starWidth: "32px",
  normalFill: "gray",
  ratedFill: "#f39c12",
  numStars: 5,
  maxValue: 5,
  precision: 1,
  rating: 0,
  fullStar: false,
  halfStar: false,
  hover: true,
  readOnly: false,
  spacing: "0px",
  rtl: false,
  multiColor: null,
  onInit: null,
  onChange: null,
  onSet: null,
  starSvg: null
};
var MULTICOLOR_OPTIONS = {
  startColor: "#c0392b",
  //red
  endColor: "#f1c40f"
  //yellow
};
function isMobileBrowser() {
  var check = false;
  (function(a) {
    if (/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino|android|ipad|playbook|silk/i.test(a) || /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(a.substr(0, 4))) check = true;
  })(navigator.userAgent || navigator.vendor || window.opera);
  return check;
}
function checkPrecision(value, minValue, maxValue) {
  if (value === minValue) {
    value = minValue;
  } else if (value === maxValue) {
    value = maxValue;
  }
  return value;
}
function checkBounds(value, minValue, maxValue) {
  var isValid = value >= minValue && value <= maxValue;
  if (!isValid) {
    throw Error("Invalid Rating, expected value between " + minValue + " and " + maxValue);
  }
  return value;
}
function isType(value, type) {
  return _typeof$1(value) === type;
}
function isDefined(value) {
  return typeof value !== "undefined";
}
var isNumber = function isNumber2(input) {
  return isType(input, "number");
};
var isString = function isString2(input) {
  return isType(input, "string");
};
var isFunction = function isFunction2(input) {
  return isType(input, "function");
};
var hexRegex = /^#([0-9a-f]{2})([0-9a-f]{2})([0-9a-f]{2})$/i;
function hexToRGB(hex) {
  if (!hexRegex.test(hex)) {
    return null;
  }
  var hexValues = hexRegex.exec(hex), r = parseInt(hexValues[1], 16), g = parseInt(hexValues[2], 16), b = parseInt(hexValues[3], 16);
  return {
    r,
    g,
    b
  };
}
function getChannelValue(startVal, endVal, percent) {
  var newVal = (endVal - startVal) * (percent / 100);
  newVal = Math.round(startVal + newVal).toString(16);
  if (newVal.length === 1) {
    newVal = "0" + newVal;
  }
  return newVal;
}
function getColor(startColor, endColor, percent) {
  if (!startColor || !endColor) {
    return null;
  }
  percent = isDefined(percent) ? percent : 0;
  startColor = hexToRGB(startColor);
  endColor = hexToRGB(endColor);
  var r = getChannelValue(startColor.r, endColor.r, percent), b = getChannelValue(startColor.b, endColor.b, percent), g = getChannelValue(startColor.g, endColor.g, percent);
  return "#" + r + g + b;
}
var eventObjectMap = {};
function getEventObject(event) {
  return eventObjectMap[event] || (eventObjectMap[event] = new String(event));
}
var handlerProxyMap = /* @__PURE__ */ new WeakMap();
function proxy(node, fn, event) {
  event = getEventObject(event);
  var eventHandlerMap = handlerProxyMap.get(node);
  if (!eventHandlerMap) {
    handlerProxyMap.set(node, eventHandlerMap = /* @__PURE__ */ new WeakMap());
  }
  var handlerMap = eventHandlerMap.get(event);
  if (!handlerMap) {
    eventHandlerMap.set(event, handlerMap = /* @__PURE__ */ new Map());
  }
  var handler = handlerMap.get(fn);
  if (handler) {
    return handler;
  }
  function proxy2(e) {
    var data = e.detail;
    fn.call(node, e, data);
  }
  handlerMap.set(fn, proxy2);
  return proxy2;
}
proxy.get = function getOriginalFunction(node, fn, event) {
  event = getEventObject(event);
  var eventHandlerMap = handlerProxyMap.get(node);
  if (!eventHandlerMap) {
    return fn;
  }
  var handlerMap = eventHandlerMap.get(event);
  if (!handlerMap) {
    return fn;
  }
  return handlerMap.get(fn) || fn;
};
var Event = isFunction(window.Event) ? window.Event : function Event2(event) {
  var params = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  var _params$bubbles = params.bubbles, bubbles = _params$bubbles === void 0 ? false : _params$bubbles, _params$cancelable = params.cancelable, cancelable = _params$cancelable === void 0 ? false : _params$cancelable;
  var evt = document.createEvent("Event");
  evt.initEvent(event, bubbles, cancelable);
  return evt;
};
var CustomEvent = isFunction(window.CustomEvent) ? window.CustomEvent : (CustomEvent.prototype = Object.create(Event.prototype), CustomEvent);
var events = {
  trigger: function trigger(event, detail) {
    var eventProps = {
      bubbles: true
    };
    if (!isDefined(detail)) {
      this.node.dispatchEvent(new Event(event, eventProps));
    } else {
      this.node.dispatchEvent(new CustomEvent(event, _objectSpread2({
        detail
      }, eventProps)));
    }
    return this;
  },
  on: function on(event, handler) {
    this.node.addEventListener(event, proxy(this.node, handler, event));
    return this;
  },
  off: function off(event, handler) {
    this.node.removeEventListener(event, proxy.get(this.node, handler, event));
    return this;
  }
};
var rateyoAttrRegex = /^rateyo(.+)$/;
function classList(node, operation, input) {
  var className = node.className.trim();
  var classes = className && className.split(/\s/) || [], classMap = {};
  classes = classes.reduce(function(result, item, index) {
    if (!classMap.hasOwnProperty(item)) {
      result.push(item);
      classMap[item] = index;
    }
    return result;
  }, []);
  if (operation === classList.add) {
    if (classMap.hasOwnProperty(input)) {
      return;
    }
    classes.push(input);
  } else if (operation === classList.remove) {
    if (!classMap.hasOwnProperty(input)) {
      return;
    }
    classes.splice(classMap[input], 1);
  }
  node.className = classes.join(" ");
}
classList.add = "add";
classList.remove = "remove";
function El(node) {
  this.node = node;
}
El.prototype = {
  empty: function empty() {
    this.node.innerHTML = "";
    return this;
  },
  addClass: function addClass(className) {
    classList(this.node, classList.add, className);
    return this;
  },
  removeClass: function removeClass(className) {
    classList(this.node, classList.remove, className);
    return this;
  },
  appendTo: function appendTo(parent) {
    (El.isEl(parent) ? parent.node : parent).appendChild(this.node);
    return this;
  },
  css: function css(styleAttribute, value) {
    this.node.style[styleAttribute] = value;
    return this;
  },
  width: function width(_width) {
    if (!isDefined(_width)) {
      return this.node.getBoundingClientRect().width;
    }
    this.css("width", _width + (isNumber(_width) ? "px" : ""));
  },
  find: function find(selector) {
    return $(this.node.querySelectorAll(selector));
  },
  attr: function attr(attrObj) {
    for (var attrName in attrObj) {
      if (attrObj.hasOwnProperty(attrName)) {
        this.node.setAttribute(attrName, attrObj[attrName]);
      }
    }
    return this;
  },
  removeAttr: function removeAttr(attributeName) {
    this.node.removeAttribute(attributeName);
    return this;
  },
  children: function children() {
    return $(this.node.childNodes);
  },
  remove: function remove() {
    return this.node.remove();
  },
  offset: function offset() {
    var _this$node$getBoundin = this.node.getBoundingClientRect(), top = _this$node$getBoundin.top, left = _this$node$getBoundin.left, bottom = _this$node$getBoundin.bottom, right = _this$node$getBoundin.right;
    return {
      top,
      left,
      bottom,
      right
    };
  },
  dataAttrOptions: function dataAttrOptions() {
    var dataset = this.node.dataset;
    return Object.keys(dataset).reduce(function(options, attr2) {
      var match = attr2.match(rateyoAttrRegex);
      if (!match) {
        return options;
      }
      var rateyoAttr = match[1], option = rateyoAttr[0].toLowerCase() + rateyoAttr.slice(1);
      options[option] = dataset[attr2];
      return options;
    }, {});
  }
};
El.prototype = _objectSpread2(_objectSpread2({}, El.prototype), events);
El.isEl = function(node) {
  return node instanceof El;
};
function Collection(nodeList) {
  var _this = this;
  this.collection = [];
  Array.prototype.forEach.call(nodeList, function(node) {
    _this.collection.push(new El(node));
  });
}
Collection.isCollection = function(input) {
  return input instanceof Collection;
};
Collection.prototype = {};
var _loop = function _loop2(method) {
  if (!El.prototype.hasOwnProperty(method)) {
    return "continue";
  }
  function proxy2() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    this.collection.forEach(function(el) {
      return El.isEl(el) && el[method].apply(el, args);
    });
    return this;
  }
  Collection.prototype[method] = proxy2;
};
for (method in El.prototype) {
  _ret = _loop(method);
  if (_ret === "continue") continue;
}
var _ret;
var method;
var parser = new DOMParser();
function parseHTML(html) {
  return parser.parseFromString(html.trim(), "text/html").body.childNodes;
}
function $(node) {
  node = isString(node) && parseHTML(node) || node;
  if (El.isEl(node) || Collection.isCollection(node)) {
    return node;
  }
  if (node instanceof NodeList) {
    return new Collection(node);
  }
  return new El(node);
}
$.El = El;
var instanceMap = /* @__PURE__ */ new WeakMap();
function RateYo(node) {
  var options = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
  if (!(this instanceof RateYo)) {
    return new RateYo(node, options);
  }
  if (instanceMap.has(node)) {
    return instanceMap.get(node);
  }
  var that = this;
  this.node = node;
  var $node = $(node);
  options = _objectSpread2(_objectSpread2(_objectSpread2({}, DEFAULTS), options), $node.dataAttrOptions());
  $node.empty().addClass("jq-ry-container");
  var $groupWrapper = $(document.createElement("div")).addClass("jq-ry-group-wrapper").appendTo($node);
  var $normalGroup = $(document.createElement("div")).addClass("jq-ry-normal-group").addClass("jq-ry-group").appendTo($groupWrapper);
  var $ratedGroup = $(document.createElement("div")).addClass("jq-ry-rated-group").addClass("jq-ry-group").appendTo($groupWrapper);
  var step, starWidth, percentOfStar, spacing, percentOfSpacing, containerWidth, minValue = 0;
  var currentRating = options.rating;
  var isInitialized = false;
  function showRating(ratingVal) {
    if (!isDefined(ratingVal)) {
      ratingVal = options.rating;
    }
    currentRating = ratingVal;
    var numStarsToShow = ratingVal / step;
    var percent = numStarsToShow * percentOfStar;
    if (numStarsToShow > 1) {
      percent += (Math.ceil(numStarsToShow) - 1) * percentOfSpacing;
    }
    setRatedFill(options.ratedFill);
    percent = options.rtl ? 100 - percent : percent;
    if (percent < 0) {
      percent = 0;
    } else if (percent > 100) {
      percent = 100;
    }
    $ratedGroup.css("width", percent + "%");
  }
  function setContainerWidth() {
    containerWidth = starWidth * options.numStars + spacing * (options.numStars - 1);
    percentOfStar = starWidth / containerWidth * 100;
    percentOfSpacing = spacing / containerWidth * 100;
    $node.width(containerWidth);
    showRating();
  }
  function setStarWidth(newWidth) {
    var starHeight = options.starWidth = newWidth;
    starWidth = window.parseFloat(options.starWidth.replace("px", ""));
    $normalGroup.find("svg").attr({
      width: options.starWidth,
      height: starHeight
    });
    $ratedGroup.find("svg").attr({
      width: options.starWidth,
      height: starHeight
    });
    setContainerWidth();
    return $node;
  }
  function setSpacing(newSpacing) {
    options.spacing = newSpacing;
    spacing = parseFloat(options.spacing.replace("px", ""));
    $normalGroup.find("svg:not(:first-child)").css("margin-left", newSpacing);
    $ratedGroup.find("svg:not(:first-child)").css("margin-left", newSpacing);
    setContainerWidth();
    return $node;
  }
  function setNormalFill(newFill) {
    options.normalFill = newFill;
    var $svgs = (options.rtl ? $ratedGroup : $normalGroup).find("svg");
    $svgs.attr({
      fill: options.normalFill
    });
    return $node;
  }
  var ratedFill = options.ratedFill;
  function setRatedFill(newFill) {
    if (options.multiColor) {
      var ratingDiff = currentRating - minValue, percentCovered = ratingDiff / options.maxValue * 100;
      var colorOpts = options.multiColor || {}, startColor = colorOpts.startColor || MULTICOLOR_OPTIONS.startColor, endColor = colorOpts.endColor || MULTICOLOR_OPTIONS.endColor;
      newFill = getColor(startColor, endColor, percentCovered);
    } else {
      ratedFill = newFill;
    }
    options.ratedFill = newFill;
    var $svgs = (options.rtl ? $normalGroup : $ratedGroup).find("svg");
    $svgs.attr({
      fill: options.ratedFill
    });
    return $node;
  }
  function setRtl(newValue) {
    newValue = !!newValue;
    options.rtl = newValue;
    setNormalFill(options.normalFill);
    showRating();
  }
  function setMultiColor(colorOptions) {
    options.multiColor = colorOptions;
    setRatedFill(colorOptions ? colorOptions : ratedFill);
  }
  function setNumStars(newValue) {
    options.numStars = newValue;
    step = options.maxValue / options.numStars;
    $normalGroup.empty();
    $ratedGroup.empty();
    for (var i = 0; i < options.numStars; i++) {
      $(options.starSvg || BASICSTAR).appendTo($normalGroup);
      $(options.starSvg || BASICSTAR).appendTo($ratedGroup);
    }
    setStarWidth(options.starWidth);
    setNormalFill(options.normalFill);
    setSpacing(options.spacing);
    showRating();
    return $node;
  }
  function setMaxValue(newValue) {
    options.maxValue = newValue;
    step = options.maxValue / options.numStars;
    if (options.rating > newValue) {
      setRating(newValue);
    }
    showRating();
    return $node;
  }
  function setPrecision(newValue) {
    options.precision = newValue;
    setRating(options.rating);
    return $node;
  }
  function setHalfStar(newValue) {
    options.halfStar = newValue;
    return $node;
  }
  function setFullStar(newValue) {
    options.fullStar = newValue;
    return $node;
  }
  function round(value) {
    var remainder = value % step, halfStep = step / 2, isHalfStar = options.halfStar, isFullStar = options.fullStar;
    if (!isFullStar && !isHalfStar) {
      return value;
    }
    if (isFullStar || isHalfStar && remainder > halfStep) {
      value += step - remainder;
    } else {
      value = value - remainder;
      if (remainder > 0) {
        value += halfStep;
      }
    }
    return value;
  }
  function calculateRating(e) {
    var position = $normalGroup.offset(), nodeStartX = position.left, nodeEndX = nodeStartX + $normalGroup.width();
    var maxValue = options.maxValue;
    var pageX = e.pageX;
    var calculatedRating = 0;
    if (pageX < nodeStartX) {
      calculatedRating = minValue;
    } else if (pageX > nodeEndX) {
      calculatedRating = maxValue;
    } else {
      var calcPrcnt = (pageX - nodeStartX) / (nodeEndX - nodeStartX);
      if (spacing > 0) {
        calcPrcnt *= 100;
        var remPrcnt = calcPrcnt;
        while (remPrcnt > 0) {
          if (remPrcnt > percentOfStar) {
            calculatedRating += step;
            remPrcnt -= percentOfStar + percentOfSpacing;
          } else {
            calculatedRating += remPrcnt / percentOfStar * step;
            remPrcnt = 0;
          }
        }
      } else {
        calculatedRating = calcPrcnt * options.maxValue;
      }
      calculatedRating = round(calculatedRating);
    }
    if (options.rtl) {
      calculatedRating = maxValue - calculatedRating;
    }
    return parseFloat(calculatedRating);
  }
  function setReadOnly(newValue) {
    options.readOnly = newValue;
    $node.attr({
      "readonly": true
    });
    unbindEvents();
    if (!newValue) {
      $node.removeAttr("readonly");
      bindEvents();
    }
    return $node;
  }
  function setRating(newValue) {
    var rating = newValue;
    var maxValue = options.maxValue;
    if (typeof rating === "string") {
      if (rating[rating.length - 1] === "%") {
        rating = rating.substr(0, rating.length - 1);
        maxValue = 100;
        setMaxValue(maxValue);
      }
      rating = parseFloat(rating);
    }
    checkBounds(rating, minValue, maxValue);
    rating = parseFloat(rating.toFixed(options.precision));
    checkPrecision(parseFloat(rating), minValue, maxValue);
    options.rating = rating;
    showRating();
    if (isInitialized) {
      $node.trigger("rateyo.set", {
        rating
      });
    }
    return $node;
  }
  function setOnInit(method) {
    options.onInit = method;
    return $node;
  }
  function setOnSet(method) {
    options.onSet = method;
    return $node;
  }
  function setOnChange(method) {
    options.onChange = method;
    return $node;
  }
  this.rating = function(newValue) {
    if (!isDefined(newValue)) {
      return options.rating;
    }
    setRating(newValue);
    return $node;
  };
  this.destroy = function() {
    if (!options.readOnly) {
      unbindEvents();
    }
    instanceMap["delete"](node);
    $node.removeClass("jq-ry-container").children().remove();
    return $node;
  };
  this.method = function(methodName) {
    if (!methodName) {
      throw Error("Method name not specified!");
    }
    if (!isDefined(this[methodName])) {
      throw Error("Method " + methodName + " doesn't exist!");
    }
    var args = Array.prototype.slice.apply(arguments, []), params = args.slice(1), method = this[methodName];
    return method.apply(this, params);
  };
  this.option = function(optionName, param) {
    if (!isDefined(optionName)) {
      return options;
    }
    var method;
    switch (optionName) {
      case "starWidth":
        method = setStarWidth;
        break;
      case "numStars":
        method = setNumStars;
        break;
      case "normalFill":
        method = setNormalFill;
        break;
      case "ratedFill":
        method = setRatedFill;
        break;
      case "multiColor":
        method = setMultiColor;
        break;
      case "maxValue":
        method = setMaxValue;
        break;
      case "precision":
        method = setPrecision;
        break;
      case "rating":
        method = setRating;
        break;
      case "halfStar":
        method = setHalfStar;
        break;
      case "fullStar":
        method = setFullStar;
        break;
      case "readOnly":
        method = setReadOnly;
        break;
      case "spacing":
        method = setSpacing;
        break;
      case "rtl":
        method = setRtl;
        break;
      case "onInit":
        method = setOnInit;
        break;
      case "onSet":
        method = setOnSet;
        break;
      case "onChange":
        method = setOnChange;
        break;
      default:
        throw Error("No such option as " + optionName);
    }
    return isDefined(param) ? method(param) : options[optionName];
  };
  function onMouseEnter(e) {
    if (!options.hover) {
      return;
    }
    var rating = calculateRating(e).toFixed(options.precision);
    var maxValue = options.maxValue;
    rating = checkPrecision(parseFloat(rating), minValue, maxValue);
    showRating(rating);
    $node.trigger("rateyo.change", {
      rating
    });
  }
  function onMouseLeave() {
    if (isMobileBrowser() || !options.hover) {
      return;
    }
    showRating();
    $node.trigger("rateyo.change", {
      rating: options.rating
    });
  }
  function onMouseClick(e) {
    var resultantRating = calculateRating(e).toFixed(options.precision);
    resultantRating = parseFloat(resultantRating);
    that.rating(resultantRating);
  }
  function onInit(e, data) {
    if (options.onInit && typeof options.onInit === "function") {
      options.onInit.apply(this, [data.rating, that]);
    }
  }
  function onChange(e, data) {
    if (options.onChange && typeof options.onChange === "function") {
      options.onChange.apply(this, [data.rating, that]);
    }
  }
  function onSet(e, data) {
    if (options.onSet && typeof options.onSet === "function") {
      options.onSet.apply(this, [data.rating, that]);
    }
  }
  function bindEvents() {
    $node.on("mousemove", onMouseEnter).on("mouseenter", onMouseEnter).on("mouseleave", onMouseLeave).on("click", onMouseClick).on("rateyo.init", onInit).on("rateyo.change", onChange).on("rateyo.set", onSet);
  }
  function unbindEvents() {
    $node.off("mousemove", onMouseEnter).off("mouseenter", onMouseEnter).off("mouseleave", onMouseLeave).off("click", onMouseClick).off("rateyo.init", onInit).off("rateyo.change", onChange).off("rateyo.set", onSet);
  }
  setNumStars(options.numStars);
  setReadOnly(options.readOnly);
  if (options.rtl) {
    setRtl(options.rtl);
  }
  instanceMap.set(node, this);
  this.rating(options.rating, true);
  isInitialized = true;
  $node.trigger("rateyo.init", {
    rating: options.rating
  });
}
Object.defineProperty(RateYo.prototype, "on", {
  value: function on2(eventName, handler) {
    $(this.node).on(eventName, handler);
    return this;
  }
});
Object.defineProperty(RateYo.prototype, "off", {
  value: function off2(eventName, handler) {
    $(this.node).off(eventName, handler);
    return this;
  }
});
Object.defineProperty(RateYo, "has", {
  value: function has(node) {
    return instanceMap.has(node);
  }
});
Object.defineProperty(RateYo, "get", {
  value: function get(node) {
    return instanceMap.get(node);
  }
});
Object.defineProperty(RateYo, "_$", {
  get: function get2() {
    return $;
  }
});
var dollar = RateYo._$;
var eventsTrigger = dollar.El.prototype.trigger;
dollar.El.prototype.trigger = function overrideTrigger() {
  var _$;
  for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
    args[_key] = arguments[_key];
  }
  eventsTrigger.apply(this, args);
  (_$ = (0, import_jquery.default)(this.node)).trigger.apply(_$, args);
};
function _rateYo(options) {
  var $nodes = (0, import_jquery.default)(this);
  if ($nodes.length === 0) {
    return $nodes;
  }
  var args = Array.prototype.slice.apply(arguments, []);
  if (args.length === 0) {
    options = args[0] = {};
  } else if (args.length === 1 && _typeof(args[0]) === "object") {
    options = args[0];
  } else if (args.length >= 1 && typeof args[0] === "string") {
    var methodName = args[0], params = args.slice(1);
    var result = [];
    import_jquery.default.each($nodes, function(i, node) {
      var existingInstance = RateYo.get(node);
      if (!existingInstance) {
        throw Error("Trying to set options before even initialization");
      }
      var method = existingInstance[methodName];
      if (!method) {
        throw Error("Method " + methodName + " does not exist!");
      }
      var returnVal = method.apply(existingInstance, params);
      result.push(returnVal);
    });
    result = result.length === 1 ? result[0] : result;
    return result;
  } else {
    throw Error("Invalid Arguments");
  }
  return import_jquery.default.each($nodes, function() {
    return new RateYo(this, import_jquery.default.extend({}, options));
  });
}
function rateYo() {
  return _rateYo.apply(this, Array.prototype.slice.apply(arguments, []));
}
import_jquery.default.fn.rateYo = rateYo;
//# sourceMappingURL=@rateyo_jquery_lib_es_jquery__rateyo.js.map
